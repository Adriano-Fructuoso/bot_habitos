"""
Handlers para conversas estruturadas (cria√ß√£o de h√°bitos)
"""

import re
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from db.session import get_db
from models.models import User, Habit
from utils.repository import HabitRepository
from utils.branding import add_branding
from utils.keyboards import create_main_menu_keyboard
from .base import safe_handler

# Estados da conversa
(
    CHOOSING_ACTION,
    ENTERING_HABIT_NAME,
    ENTERING_DAYS_OF_WEEK,
    ENTERING_TIME_INVESTED,
    ENTERING_HABIT_DESCRIPTION,
    ENTERING_XP_REWARD,
    ENTERING_CATEGORY,
    CONFIRMING_HABIT,
    HABIT_CREATED
) = range(9)


@safe_handler
async def start_habit_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia o processo de cria√ß√£o de h√°bito"""
    user = update.effective_user
    
    # Verifica se est√° em conversa ativa do menu
    if context.user_data.get("conversation_active") and context.user_data.get("conversation_type") == "habit_creation":
        # Se j√° est√° em conversa, processa o texto como nome do h√°bito
        if update.message and update.message.text:
            return await handle_habit_name(update, context)
    
    # Verifica se √© comando ou texto
    if update.message.text.startswith('/'):
        # Se for comando, inicia direto
        await update.message.reply_text(
            add_branding("""
üìù *Criando Novo H√°bito*

Vamos criar seu h√°bito passo a passo!

**Digite o nome do h√°bito:**
Exemplo: "Beber √°gua", "Exerc√≠cio f√≠sico", "Ler 20 p√°ginas"
"""),
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTERING_HABIT_NAME
    else:
        # Se for texto livre, pergunta se quer criar h√°bito
        keyboard = [
            ["‚úÖ Sim, criar h√°bito"],
            ["‚ùå N√£o, cancelar"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            add_branding("""
ü§î *Voc√™ quer criar um novo h√°bito?*

Digite o nome de um h√°bito existente para complet√°-lo, ou escolha criar um novo:
"""),
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return CHOOSING_ACTION


@safe_handler
async def handle_action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa a escolha do usu√°rio"""
    text = update.message.text
    
    if "criar h√°bito" in text.lower():
        await update.message.reply_text(
            add_branding("""
üìù *Criando Novo H√°bito*

**Digite o nome do h√°bito:**
Exemplo: "Beber √°gua", "Exerc√≠cio f√≠sico", "Ler 20 p√°ginas"
"""),
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTERING_HABIT_NAME
    else:
        await update.message.reply_text(
            "‚ùå Cria√ß√£o cancelada. Use /menu para voltar ao menu principal.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


@safe_handler
async def handle_habit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o nome do h√°bito"""
    habit_name = update.message.text.strip()
    
    if len(habit_name) < 2:
        await update.message.reply_text(
            "‚ùå Nome muito curto. Digite um nome com pelo menos 2 caracteres."
        )
        return ENTERING_HABIT_NAME
    
    # Salva o nome no contexto
    context.user_data['habit_name'] = habit_name
    
    # Mostra op√ß√µes de dias da semana
    keyboard = [
        ["üìÖ Segunda a Sexta", "üìÖ Segunda a Domingo"],
        ["üìÖ Apenas Finais de Semana", "üìÖ Todos os dias"],
        ["üìÖ Personalizado", "‚ùå Cancelar"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        add_branding(f"""
üìÖ *Dias de Repeti√ß√£o*

**Em quais dias voc√™ quer fazer "{habit_name}"?**

‚Ä¢ üìÖ Segunda a Sexta - Dias √∫teis
‚Ä¢ üìÖ Segunda a Domingo - Todos os dias
‚Ä¢ üìÖ Apenas Finais de Semana - S√°bado e Domingo
‚Ä¢ üìÖ Todos os dias - Diariamente
‚Ä¢ üìÖ Personalizado - Escolher dias espec√≠ficos
"""),
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return ENTERING_DAYS_OF_WEEK


@safe_handler
async def handle_days_of_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa os dias da semana"""
    choice = update.message.text.strip()
    
    if "cancelar" in choice.lower():
        await update.message.reply_text(
            "‚ùå Cria√ß√£o cancelada. Use /menu para voltar ao menu principal.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # Verifica se est√° processando escolha personalizada
    if context.user_data.get('temp_days_choice') == 'personalizado':
        # Processa a escolha personalizada
        selected_days = []
        
        # Mapeia nomes dos dias para n√∫meros
        day_map = {
            "segunda": 1, "ter√ßa": 2, "quarta": 3, "quinta": 4,
            "sexta": 5, "s√°bado": 6, "domingo": 7
        }
        
        for day_name, day_num in day_map.items():
            if day_name in choice.lower():
                selected_days.append(day_num)
        
        if selected_days:
            days_of_week = ",".join(map(str, sorted(selected_days)))
            context.user_data['days_of_week'] = days_of_week
            # Remove flag tempor√°ria
            context.user_data.pop('temp_days_choice', None)
        else:
            # Se n√£o selecionou nenhum dia, volta a pedir
            await update.message.reply_text(
                add_branding("""
‚ùå *Nenhum dia selecionado*

Por favor, escolha pelo menos um dia da semana.
"""),
                parse_mode="Markdown"
            )
            return ENTERING_DAYS_OF_WEEK
    else:
        # Processa escolhas padr√£o
        days_map = {
            "segunda a sexta": "1,2,3,4,5",  # Segunda=1, Ter√ßa=2, etc.
            "segunda a domingo": "1,2,3,4,5,6,7",
            "apenas finais de semana": "6,7",  # S√°bado=6, Domingo=7
            "todos os dias": "1,2,3,4,5,6,7"
        }
        
        days_of_week = "1,2,3,4,5,6,7"  # padr√£o: todos os dias
        for key, value in days_map.items():
            if key in choice.lower():
                days_of_week = value
                break
        
        # Se for personalizado, pede para escolher
        if "personalizado" in choice.lower():
            keyboard = [
                ["‚úÖ Segunda", "‚úÖ Ter√ßa", "‚úÖ Quarta"],
                ["‚úÖ Quinta", "‚úÖ Sexta", "‚úÖ S√°bado"],
                ["‚úÖ Domingo", "‚ùå Cancelar"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await update.message.reply_text(
                add_branding("""
üìÖ *Escolha os dias espec√≠ficos:*

Clique nos dias que voc√™ quer fazer o h√°bito.
Depois clique em "Confirmar" ou "Cancelar".
"""),
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            # Salva temporariamente a escolha
            context.user_data['temp_days_choice'] = 'personalizado'
            return ENTERING_DAYS_OF_WEEK
        
        context.user_data['days_of_week'] = days_of_week
    
    # Mostra op√ß√µes de tempo investido
    keyboard = [
        ["‚è±Ô∏è 15 minutos", "‚è±Ô∏è 30 minutos"],
        ["‚è±Ô∏è 45 minutos", "‚è±Ô∏è 1 hora"],
        ["‚è±Ô∏è 1.5 horas", "‚è±Ô∏è 2 horas"],
        ["‚è±Ô∏è Personalizado", "‚ùå Cancelar"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        add_branding(f"""
‚è±Ô∏è *Tempo Investido*

**Quanto tempo voc√™ vai investir em "{context.user_data['habit_name']}"?**

‚Ä¢ ‚è±Ô∏è 15 minutos - H√°bito r√°pido
‚Ä¢ ‚è±Ô∏è 30 minutos - H√°bito m√©dio
‚Ä¢ ‚è±Ô∏è 45 minutos - H√°bito moderado
‚Ä¢ ‚è±Ô∏è 1 hora - H√°bito longo
‚Ä¢ ‚è±Ô∏è 1.5 horas - H√°bito extenso
‚Ä¢ ‚è±Ô∏è 2 horas - H√°bito muito longo
‚Ä¢ ‚è±Ô∏è Personalizado - Definir tempo espec√≠fico
"""),
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return ENTERING_TIME_INVESTED


@safe_handler
async def handle_time_invested(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o tempo investido"""
    choice = update.message.text.strip()
    
    if "cancelar" in choice.lower():
        await update.message.reply_text(
            "‚ùå Cria√ß√£o cancelada. Use /menu para voltar ao menu principal.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # Verifica se est√° processando tempo personalizado
    if context.user_data.get('temp_time_choice') == 'personalizado':
        try:
            # Tenta converter para n√∫mero
            time_minutes = int(choice)
            if time_minutes > 0 and time_minutes <= 480:  # M√°ximo 8 horas
                context.user_data['time_minutes'] = time_minutes
                # Remove flag tempor√°ria
                context.user_data.pop('temp_time_choice', None)
            else:
                await update.message.reply_text(
                    add_branding("""
‚ùå *Tempo inv√°lido*

Por favor, digite um n√∫mero entre 1 e 480 minutos.
"""),
                    parse_mode="Markdown"
                )
                return ENTERING_TIME_INVESTED
        except ValueError:
            await update.message.reply_text(
                add_branding("""
‚ùå *Formato inv√°lido*

Por favor, digite apenas n√∫meros (exemplo: 30, 45, 90).
"""),
                parse_mode="Markdown"
            )
            return ENTERING_TIME_INVESTED
    else:
        # Processa escolhas padr√£o
        time_map = {
            "15 minutos": 15,
            "30 minutos": 30,
            "45 minutos": 45,
            "1 hora": 60,
            "1.5 horas": 90,
            "2 horas": 120
        }
        
        time_minutes = 30  # padr√£o: 30 minutos
        for key, value in time_map.items():
            if key in choice.lower():
                time_minutes = value
                break
        
        # Se for personalizado, pede para digitar
        if "personalizado" in choice.lower():
            await update.message.reply_text(
                add_branding("""
‚è±Ô∏è *Tempo Personalizado*

**Digite o tempo em minutos:**
Exemplo: 20, 45, 90, 120

Ou digite "cancelar" para cancelar.
"""),
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove()
            )
            context.user_data['temp_time_choice'] = 'personalizado'
            return ENTERING_TIME_INVESTED
        
        context.user_data['time_minutes'] = time_minutes
    
    # Pede descri√ß√£o
    await update.message.reply_text(
        add_branding(f"""
üìù *Descri√ß√£o (Opcional)*

**Digite uma descri√ß√£o para "{context.user_data['habit_name']}":**
Exemplo: "Beber 2L de √°gua por dia", "30 minutos de exerc√≠cio"

Ou digite "pular" para continuar sem descri√ß√£o.
"""),
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    return ENTERING_HABIT_DESCRIPTION


@safe_handler
async def handle_habit_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa a descri√ß√£o do h√°bito"""
    description = update.message.text.strip()
    
    if description.lower() in ['pular', 'skip', 'n√£o', 'nao']:
        description = None
    
    context.user_data['habit_description'] = description
    
    await update.message.reply_text(
        add_branding(f"""
üíé *XP Reward*

**Quantos pontos XP este h√°bito deve dar?**
‚Ä¢ 5 XP = H√°bito f√°cil
‚Ä¢ 10 XP = H√°bito m√©dio  
‚Ä¢ 15 XP = H√°bito dif√≠cil
‚Ä¢ 20 XP = H√°bito muito dif√≠cil

Digite um n√∫mero de 1 a 50:
"""),
        parse_mode="Markdown"
    )
    return ENTERING_XP_REWARD


@safe_handler
async def handle_xp_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o XP reward"""
    try:
        xp_reward = int(update.message.text.strip())
        if xp_reward < 1 or xp_reward > 50:
            await update.message.reply_text(
                "‚ùå XP deve ser entre 1 e 50. Digite novamente:"
            )
            return ENTERING_XP_REWARD
    except ValueError:
        await update.message.reply_text(
            "‚ùå Digite um n√∫mero v√°lido entre 1 e 50:"
        )
        return ENTERING_XP_REWARD
    
    context.user_data['xp_reward'] = xp_reward
    
    # Mostra categorias dispon√≠veis
    keyboard = [
        ["üèÉ‚Äç‚ôÇÔ∏è Sa√∫de", "üìö Educa√ß√£o"],
        ["üíº Trabalho", "üè† Casa"],
        ["üí∞ Finan√ßas", "üéØ Pessoal"],
        ["‚ùå Cancelar"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        add_branding(f"""
üìÇ *Categoria*

**Escolha uma categoria para o h√°bito:**
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è Sa√∫de - Exerc√≠cios, alimenta√ß√£o, sono
‚Ä¢ üìö Educa√ß√£o - Leitura, estudos, cursos
‚Ä¢ üíº Trabalho - Produtividade, organiza√ß√£o
‚Ä¢ üè† Casa - Limpeza, organiza√ß√£o
‚Ä¢ üí∞ Finan√ßas - Economia, investimentos
‚Ä¢ üéØ Pessoal - Medita√ß√£o, hobbies, relacionamentos
"""),
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return ENTERING_CATEGORY


@safe_handler
async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa a categoria do h√°bito"""
    category_text = update.message.text.strip()
    
    if "cancelar" in category_text.lower():
        await update.message.reply_text(
            "‚ùå Cria√ß√£o cancelada. Use /menu para voltar ao menu principal.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # Mapeia emoji para categoria
    category_map = {
        "üèÉ‚Äç‚ôÇÔ∏è": "saude",
        "üìö": "educacao", 
        "üíº": "trabalho",
        "üè†": "casa",
        "üí∞": "financas",
        "üéØ": "pessoal"
    }
    
    category = "pessoal"  # padr√£o
    for emoji, cat in category_map.items():
        if emoji in category_text:
            category = cat
            break
    
    context.user_data['category'] = category
    
    # Mostra resumo para confirma√ß√£o
    habit_name = context.user_data['habit_name']
    days_of_week = context.user_data.get('days_of_week', 'Todos os dias')
    time_minutes = context.user_data.get('time_minutes', 30)
    description = context.user_data.get('habit_description', 'Sem descri√ß√£o')
    xp_reward = context.user_data['xp_reward']
    
    # Converte dias para texto leg√≠vel
    days_text = {
        "1,2,3,4,5": "Segunda a Sexta",
        "1,2,3,4,5,6,7": "Todos os dias",
        "6,7": "Finais de semana"
    }.get(days_of_week, f"Dias: {days_of_week}")
    
    # Converte tempo para texto leg√≠vel
    time_text = f"{time_minutes} minutos"
    if time_minutes >= 60:
        hours = time_minutes // 60
        minutes = time_minutes % 60
        time_text = f"{hours}h {minutes}min" if minutes > 0 else f"{hours}h"
    
    summary = f"""
üìã *Resumo do H√°bito*

**Nome:** {habit_name}
**Dias:** {days_text}
**Tempo:** {time_text}
**Descri√ß√£o:** {description}
**XP:** {xp_reward} pontos
**Categoria:** {category.title()}

**Confirma as informa√ß√µes?**
"""
    
    keyboard = [
        ["‚úÖ Confirmar e criar"],
        ["‚ùå Cancelar e recome√ßar"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        add_branding(summary),
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return CONFIRMING_HABIT


@safe_handler
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa a confirma√ß√£o do h√°bito"""
    choice = update.message.text.strip()
    
    if "cancelar" in choice.lower():
        # Limpa dados e recome√ßa
        context.user_data.clear()
        await update.message.reply_text(
            "üîÑ Vamos recome√ßar! Digite /addhabits para criar um novo h√°bito.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # Cria o h√°bito
    user = update.effective_user
    db = next(get_db())
    
    try:
        # Busca ou cria usu√°rio
        from utils.gamification import get_or_create_user
        db_user = get_or_create_user(
            db=db,
            telegram_user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # Cria o h√°bito usando o reposit√≥rio
        habit = HabitRepository.create_habit(
            db=db,
            user_id=user.id,  # telegram_user_id
            name=context.user_data['habit_name'],
            description=context.user_data.get('habit_description'),
            xp_reward=context.user_data['xp_reward'],
            category=context.user_data['category'],
            days_of_week=context.user_data.get('days_of_week', '1,2,3,4,5,6,7'),
            time_minutes=context.user_data.get('time_minutes', 30)
        )
        
        # Mensagem de sucesso
        success_message = f"""
‚úÖ *H√°bito Criado com Sucesso!*

üéØ **{habit.name}**
üìù {habit.description or 'Sem descri√ß√£o'}
üíé {habit.xp_reward} XP
üìÇ {habit.category.title()}

**Agora voc√™ pode:**
‚Ä¢ Completar este h√°bito usando bot√µes
‚Ä¢ Digite "{habit.name}" para completar por texto
‚Ä¢ Use /habits para ver todos os h√°bitos
‚Ä¢ Use /menu para voltar ao menu principal
"""
        
        # Verifica se veio do menu
        if context.user_data.get("conversation_active") and context.user_data.get("conversation_type") == "habit_creation":
            # Se veio do menu, volta ao menu principal
            from utils.keyboards import create_main_menu_keyboard
            await update.message.reply_text(
                add_branding(success_message),
                parse_mode="Markdown",
                reply_markup=create_main_menu_keyboard()
            )
        else:
            # Se veio de comando, mostra menu normal
            await update.message.reply_text(
                add_branding(success_message),
                parse_mode="Markdown",
                reply_markup=create_main_menu_keyboard()
            )
        
        # Limpa dados da conversa
        context.user_data.clear()
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå Erro ao criar h√°bito: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        db.close()
    
    return ConversationHandler.END


@safe_handler
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancela a conversa"""
    await update.message.reply_text(
        "‚ùå Cria√ß√£o de h√°bito cancelada. Use /menu para voltar ao menu principal.",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END


# Cria o ConversationHandler
habit_creation_handler = ConversationHandler(
    entry_points=[
        CommandHandler("addhabits", start_habit_creation),
        MessageHandler(filters.Regex(r"^(criar|novo|adicionar)\s+h√°bito"), start_habit_creation),
        # Entry point para quando vem do menu
        MessageHandler(filters.TEXT & ~filters.COMMAND, start_habit_creation),
    ],
    states={
        CHOOSING_ACTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action_choice)
        ],
        ENTERING_HABIT_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_habit_name)
        ],
        ENTERING_DAYS_OF_WEEK: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_days_of_week)
        ],
        ENTERING_TIME_INVESTED: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_invested)
        ],
        ENTERING_HABIT_DESCRIPTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_habit_description)
        ],
        ENTERING_XP_REWARD: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_xp_reward)
        ],
        ENTERING_CATEGORY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)
        ],
        CONFIRMING_HABIT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirmation)
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_conversation),
        MessageHandler(filters.Regex(r"^(cancelar|cancel|sair)"), cancel_conversation)
    ],
    name="habit_creation",
    persistent=False
)
