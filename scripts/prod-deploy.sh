#!/bin/bash

# Script de deploy em produ√ß√£o
# Uso: ./scripts/prod-deploy.sh [tag]

set -e

# Configura√ß√µes
TAG=${1:-latest}
COMPOSE_FILE="docker-compose.yml"
BACKUP_BEFORE_DEPLOY=true

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Iniciando deploy em produ√ß√£o...${NC}"
echo -e "${BLUE}üìã Tag: ${TAG}${NC}"

# Verificar se .env existe
if [ ! -f ".env" ]; then
    echo -e "${RED}‚ùå Arquivo .env n√£o encontrado!${NC}"
    echo -e "${YELLOW}üìù Copie .env.example para .env e configure as vari√°veis.${NC}"
    exit 1
fi

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando!${NC}"
    exit 1
fi

# Backup antes do deploy (se habilitado)
if [ "$BACKUP_BEFORE_DEPLOY" = true ]; then
    echo -e "${YELLOW}üíæ Fazendo backup antes do deploy...${NC}"
    if docker compose ps | grep -q "db.*Up"; then
        ./scripts/backup.sh "pre_deploy_$(date +%Y%m%d_%H%M%S)"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Banco n√£o est√° rodando, pulando backup.${NC}"
    fi
fi

# Parar servi√ßos existentes
echo -e "${BLUE}üõë Parando servi√ßos existentes...${NC}"
docker compose down || true

# Limpar imagens antigas (opcional)
echo -e "${BLUE}üßπ Limpando imagens antigas...${NC}"
docker image prune -f || true

# Construir nova imagem
echo -e "${BLUE}üî® Construindo nova imagem...${NC}"
docker compose build --no-cache

# Iniciar servi√ßos
echo -e "${BLUE}üöÄ Iniciando servi√ßos...${NC}"
docker compose up -d

# Aguardar banco estar pronto
echo -e "${BLUE}‚è≥ Aguardando banco estar pronto...${NC}"
sleep 10

# Verificar se banco est√° respondendo
for i in {1..30}; do
    if docker compose exec db pg_isready -U habit_user -d habit_db > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Banco de dados pronto!${NC}"
        break
    fi
    echo -e "${YELLOW}‚è≥ Aguardando banco... (${i}/30)${NC}"
    sleep 2
done

# Executar migra√ß√µes
echo -e "${BLUE}üîÑ Executando migra√ß√µes...${NC}"
docker compose run --rm habit-bot alembic upgrade head

# Verificar se bot est√° rodando
echo -e "${BLUE}üîç Verificando se bot est√° rodando...${NC}"
sleep 5

if docker compose ps | grep -q "habit-bot.*Up"; then
    echo -e "${GREEN}‚úÖ Bot iniciado com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Bot n√£o conseguiu iniciar!${NC}"
    echo -e "${YELLOW}üìã Verificando logs...${NC}"
    docker compose logs habit-bot --tail=50
    exit 1
fi

# Health check
echo -e "${BLUE}üè• Executando health check...${NC}"
sleep 10

# Mostrar status final
echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
echo -e "${BLUE}üìä Status dos servi√ßos:${NC}"
docker compose ps

echo -e "${BLUE}üìã Comandos √∫teis:${NC}"
echo -e "${BLUE}   make logs          # Ver logs${NC}"
echo -e "${BLUE}   make down          # Parar servi√ßos${NC}"
echo -e "${BLUE}   ./scripts/backup.sh # Fazer backup${NC}"

# Verificar se h√° erros nos logs
ERROR_COUNT=$(docker compose logs habit-bot --tail=100 | grep -i error | wc -l)
if [ "$ERROR_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Encontrados ${ERROR_COUNT} erros nos logs. Verifique: make logs${NC}"
else
    echo -e "${GREEN}‚úÖ Nenhum erro encontrado nos logs.${NC}"
fi
